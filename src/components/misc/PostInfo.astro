---
import { articleConfig, siteConfig } from '@/config';
import MetaIcon from '@components/widgets/MetaIcon.astro';
import { getCategoryUrl, getTagUrl } from '@utils/content-utils';
import { t } from '@utils/i18n';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
  title: string;
  publishedAt?: Date;
  category?: string;
  tags?: string[];
  wordCount?: number;
  readingTime?: number;
  lang?: string;
  class?: string;
}

const {
  title,
  publishedAt,
  category,
  tags,
  wordCount,
  readingTime,
  lang,
  class: className,
  ...rest
} = Astro.props;

interface MetaInfo {
  text: string;
  link?: string;
  time?: Date;
}

const metas: (
  | ({ icon: string; title?: string } & (MetaInfo | { group: MetaInfo[] }))
  | undefined
)[] = [
  publishedAt && {
    icon: 'material-symbols:calendar-clock-outline-rounded',
    title: t.meta.publishedAt(),
    text: publishedAt.toLocaleDateString(lang || siteConfig.lang.replace('_', '-')),
    time: publishedAt,
  },
  articleConfig.wordCount && typeof wordCount === 'number'
    ? {
        icon: 'material-symbols:docs-rounded',
        title: t.meta.wordsCount(),
        text: t.status.wordsCount(wordCount),
      }
    : undefined,
  articleConfig.readingTime && typeof readingTime === 'number'
    ? {
        icon: 'material-symbols:nest-clock-farsight-analog-rounded',
        title: t.meta.readingTime(),
        text: t.status.readTime(readingTime),
      }
    : undefined,
  category
    ? {
        icon: 'material-symbols:category-outline-rounded',
        title: t.meta.category(),
        text: category,
        link: getCategoryUrl(category),
      }
    : undefined,
  tags && tags.length > 0
    ? {
        icon: 'material-symbols:tag-rounded',
        title: t.meta.tags(),
        group: tags.map((tag) => ({
          text: tag,
          link: getTagUrl(tag),
        })),
      }
    : undefined,
];
---

<div id="post-info" class:list={['flex flex-col max-md:px-3', className]} {...rest}>
  <h1 class="text-3xl font-bold">{title}</h1>
  {
    metas.filter((item) => Boolean(item)).length > 0 && (
      <div id="post-meta" class="mt-4 flex flex-wrap gap-3">
        {metas.map((meta) => {
          return (
            meta && (
              <div class="flex flex-wrap items-center gap-1">
                <MetaIcon name={meta.icon} title={meta.title} aria-label={meta.title} />
                {(() => {
                  const process = (info: MetaInfo) => {
                    const text = info.time ? (
                      <time datetime={info.time?.toISOString()}>{info.text}</time>
                    ) : (
                      <span>{info.text}</span>
                    );
                    return info.link ? (
                      <a href={info.link} title={info.text} class="link-hover">
                        {text}
                      </a>
                    ) : (
                      text
                    );
                  };
                  if ('group' in meta) {
                    return meta.group
                      .map(process)
                      .flatMap((item, index, arr) =>
                        index === arr.length - 1 ? [item] : [item, '/']
                      );
                  }
                  return process(meta);
                })()}
              </div>
            )
          );
        })}
      </div>
    )
  }
</div>
