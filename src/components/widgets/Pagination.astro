---
import { footerConfig } from '@/config';
import { t } from '@utils/i18n';
import { Icon } from 'astro-icon/components';
import Button from './Button.astro';

interface Props {
  total: number;
  current: number;
  baseUrl: string;
  specialPages?: { page: number; url: string }[];
}

const { total, current, baseUrl, specialPages } = Astro.props;

let pages: { page: number; url: string }[] = [];

function getPageUrl(page: number) {
  return specialPages?.find((p) => p.page === page)?.url || `${baseUrl}/${page}`;
}

function pushPage(page: number) {
  pages.push({ page, url: getPageUrl(page) });
}

if (total <= 5) Array.from({ length: total }).map((_, i) => pushPage(i + 1));
else {
  if (current <= 3) {
    Array.from({ length: 3 }).map((_, i) => pushPage(i + 1));
    pages.push({ page: -1, url: '' });
    pushPage(total);
  } else if (current >= total - 2) {
    pushPage(1);
    pages.push({ page: -1, url: '' });
    Array.from({ length: 3 }).map((_, i) => pushPage(total - 2 + i));
  } else {
    pushPage(1);
    pages.push({ page: -1, url: '' });
    pushPage(current - 1);
    pushPage(current);
    pushPage(current + 1);
    pages.push({ page: -1, url: '' });
    pushPage(total);
  }
}
---

<nav
  id="pagination"
  class:list={[
    'relative flex min-h-10 w-full justify-between max-md:px-2',
    // Hide pagination if only one page and no footer columns
    pages.length <= 1 && footerConfig.columns !== false && 'max-xs:hidden',
  ]}
>
  {
    current > 1 && (
      <Button
        id="prev-page-btn"
        class:list={[
          'btn-primary absolute left-2 md:left-0',
          current < total ? 'max-xs:w-[calc(50%-1rem)]' : 'max-xs:w-[calc(100%-1rem)]',
        ]}
        href={getPageUrl(current - 1)}
        title={t.navigation.prevPage()}
        aria-label={t.navigation.prevPage()}
        rel="prev"
      >
        <Icon name="material-symbols:chevron-left-rounded" class="my-1 text-2xl" />
        <span class="xs:hidden">{t.navigation.prevPage()}</span>
      </Button>
    )
  }
  <div class="max-xs:hidden mx-auto flex items-center justify-center gap-2">
    <div class={pages.length > 1 ? 'join' : undefined}>
      {
        pages.map((p) => {
          return (
            <Button
              class:list={[
                'join-item btn-soft btn-primary',
                current === p.page && 'btn-active',
                p.page === -1 && 'btn-disabled',
              ]}
              href={p.url}
            >
              <span class="mx-1">{`${p.page === -1 ? '...' : p.page}`}</span>
            </Button>
          );
        })
      }
    </div>
    {
      total > 1 && (
        <label
          id="page-jumper"
          class="input input-bordered max-xs:hidden mx-2 flex flex-row items-center gap-0 overflow-hidden px-0"
          data-base-url={baseUrl}
          data-special-pages={specialPages?.map((p) => `${p.page}:${p.url}`).join(',')}
        >
          <input
            id="page-jumper-input"
            type="number"
            min="1"
            max={total}
            class="pr-2 pl-4 duration-300"
            inert
          />
          <Button id="page-jumper-button" class="relative right-0 m-0 duration-300">
            <Icon
              name="material-symbols:keyboard-double-arrow-right-rounded"
              class="my-1 text-xl"
            />
          </Button>
        </label>
      )
    }
  </div>
  {
    current < total && (
      <Button
        id="next-page-btn"
        class:list={[
          'btn-primary absolute right-2 md:right-0',
          current > 1 ? 'max-xs:w-[calc(50%-1rem)]' : 'max-xs:w-[calc(100%-1rem)]',
        ]}
        href={getPageUrl(current + 1)}
        title={t.navigation.nextPage()}
        aria-label={t.navigation.nextPage()}
        rel="next"
      >
        <span class="xs:hidden">{t.navigation.nextPage()}</span>
        <Icon name="material-symbols:chevron-right-rounded" class="my-1 text-2xl" />
      </Button>
    )
  }
</nav>

<style>
  /* hide arrows from number input */
  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    appearance: none;
  }

  input[type='number'] {
    appearance: textfield;
  }

  input:focus {
    outline: none;
  }
</style>

<script>
  function setup() {
    const pageJumper = document.getElementById('page-jumper');
    const pageJumperInput = document.getElementById(
      'page-jumper-input'
    ) as HTMLInputElement | null;
    const pageJumperButton = document.getElementById('page-jumper-button');

    function pageJumperMouseEnterCallback() {
      if (pageJumperInput) pageJumperInput.style.width = '4rem';
      pageJumperInput?.removeAttribute('inert');
      pageJumperInput?.classList.add('pl-4');
      pageJumperInput?.classList.add('pr-2');
      pageJumperInput?.focus();
    }

    function pageJumperMouseLeaveCallback() {
      if (pageJumperInput) pageJumperInput.style.width = '0px';
      pageJumperInput?.setAttribute('inert', '');
      pageJumperInput?.classList.remove('pl-4');
      pageJumperInput?.classList.remove('pr-2');
      pageJumperInput?.blur();
    }

    function getPageUrl(page: number) {
      const baseUrl = pageJumper?.getAttribute('data-base-url');
      const specialPagesStr = pageJumper?.getAttribute('data-special-pages');
      const specialPagesArray = specialPagesStr?.split(',');
      const specialPages = specialPagesArray?.map((p) => {
        const [page, url] = p.split(':', 2);
        return { page: Number(page), url: url };
      });
      return specialPages?.find((p) => p.page === page)?.url || `${baseUrl}/${page}`;
    }

    function pageJumperExecHandler() {
      const page = pageJumperInput?.value;
      if (page) {
        const pageUrl = getPageUrl(Number(page));
        window.swup?.navigate(pageUrl);
      }
    }

    pageJumper?.addEventListener('mouseenter', pageJumperMouseEnterCallback);
    pageJumper?.addEventListener('mouseleave', pageJumperMouseLeaveCallback);
    pageJumperMouseLeaveCallback();

    pageJumperInput?.addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        pageJumperExecHandler();
      }
    });
    pageJumperButton?.addEventListener('click', pageJumperExecHandler);
  }
  document.addEventListener('astro:page-load', setup);
  setup();
</script>
