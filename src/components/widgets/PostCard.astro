---
import { siteConfig } from '@/config';
import { getCategoryUrl, getTagUrl } from '@utils/content-utils';
import { t } from '@utils/i18n';
import type { ImageMetadata } from 'astro';
import MetaIcon from './MetaIcon.astro';
import PostCardCover from './PostCardCover.astro';
import ReadMoreButton from './ReadMoreButton.astro';

interface Props {
  class?: string;
  title: string;
  url: string;
  published: Date;
  tags: string[];
  category?: string;
  cover?: string | ImageMetadata;
  description: string;
}

const { title, url, published, tags, category, cover } = Astro.props;
const className = Astro.props.class;

const hasCover = cover !== '' && cover !== undefined && cover !== null;

interface MetaInfo {
  text: string;
  link?: string;
  time?: Date;
}

const metas: (
  | ({ icon: string; title?: string } & (MetaInfo | { group: MetaInfo[] }))
  | undefined
)[] = [
  {
    icon: 'material-symbols:calendar-clock-outline-rounded',
    title: t.meta.publishedAt(),
    text: published.toLocaleDateString(siteConfig.lang.replace('_', '-')),
    time: published,
  },
  category
    ? {
        icon: 'material-symbols:category-outline-rounded',
        title: t.meta.category(),
        text: category,
        link: getCategoryUrl(category),
      }
    : undefined,
  tags.length > 0
    ? {
        icon: 'material-symbols:tag-rounded',
        title: t.meta.tags(),
        group: tags.map((tag) => ({
          text: tag,
          link: getTagUrl(tag),
        })),
      }
    : undefined,
];
---

<div
  class:list={[
    'card border-base-300 bg-base-200 flex w-full flex-col-reverse overflow-hidden border md:flex-row md:justify-between',
    className,
  ]}
>
  <div class="card-body">
    <a href={url} class="card-title">{title}</a>
    <div class="text-base-content/60 mb-3 flex flex-wrap items-center gap-3 text-sm">
      {
        metas.map((meta) => {
          return (
            meta && (
              <div class="flex flex-wrap items-center gap-1">
                <MetaIcon name={meta.icon} title={meta.title} aria-label={meta.title} />
                {(() => {
                  const process = (info: MetaInfo) => {
                    const text = info.time ? (
                      <time datetime={info.time?.toISOString()}>{info.text}</time>
                    ) : (
                      <span>{info.text}</span>
                    );
                    return info.link ? (
                      <a href={info.link} title={info.text} class="link-hover">
                        {text}
                      </a>
                    ) : (
                      text
                    );
                  };
                  if ('group' in meta) {
                    return meta.group
                      .map(process)
                      .flatMap((item, index, arr) =>
                        index === arr.length - 1 ? [item] : [item, '/']
                      );
                  }
                  return process(meta);
                })()}
              </div>
            )
          );
        })
      }
    </div>
  </div>
  {
    hasCover ? (
      <div class="flex items-center justify-center md:h-48 md:w-3/4 md:max-w-96">
        <PostCardCover url={url} title={title} cover={cover} />
      </div>
    ) : (
      <ReadMoreButton href={url} title={title} />
    )
  }
</div>
