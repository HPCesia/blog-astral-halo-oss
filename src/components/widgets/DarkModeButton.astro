---
import { t } from '@utils/i18n';
import { Icon } from 'astro-icon/components';
import type { HTMLAttributes } from 'astro/types';
import Button from './Button.astro';

interface Props extends Omit<HTMLAttributes<'button'>, 'onclick'> {
  showText?: boolean;
  useDefaultBtnClass?: boolean;
}

const { class: className, showText, useDefaultBtnClass, ...rest } = Astro.props;
---

<Button
  class:list={['darkmode-btn swap swap-rotate', className]}
  useDefaultClass={useDefaultBtnClass}
  {...rest}
  data-text-light={t.button.themeToggle.lightMode()}
  data-text-dark={t.button.themeToggle.darkMode()}
  data-text-auto={t.button.themeToggle.systemMode()}
  role="switch"
  aria-label={t.button.themeToggle.title()}
>
  <input type="checkbox" inert />
  <Icon
    class="darkmode-icon-light swap-off"
    name="material-symbols:light-mode-rounded"
    role="presentation"
    aria-hidden
  />
  <Icon
    class="darkmode-icon-dark swap-on"
    name="material-symbols:dark-mode-rounded"
    role="presentation"
    aria-hidden
  />
  <Icon
    class="darkmode-icon-auto swap-indeterminate"
    name="material-symbols:night-sight-auto-rounded"
    role="presentation"
    aria-hidden
  />
  <span class={showText ? 'darkmode-text pl-6' : 'sr-only'}></span>
</Button>

<script>
  import { buildConfig } from '@/config';

  function setup() {
    const darkmodeBtns = document.querySelectorAll('button.darkmode-btn');

    // 获取当前主题模式
    function getCurrentMode(): 'system' | 'light' | 'dark' {
      if (!('darkMode' in localStorage)) {
        return 'system';
      }
      return localStorage.darkMode === 'true' ? 'dark' : 'light';
    }

    // 获取下一个主题模式
    function getNextMode(
      currentMode: 'system' | 'light' | 'dark'
    ): 'system' | 'light' | 'dark' {
      switch (currentMode) {
        case 'system':
          return 'light';
        case 'light':
          return 'dark';
        case 'dark':
          return 'system';
      }
    }

    darkmodeBtns.forEach((btn) => {
      const checkbox = btn.querySelector('input[type="checkbox"]') as HTMLInputElement;
      const text = btn.querySelector('.darkmode-text') || btn.querySelector('.sr-only');

      // 更新UI状态和文本
      function updateUI(mode: 'system' | 'light' | 'dark') {
        if (mode === 'system') {
          checkbox.indeterminate = true;
        } else {
          checkbox.indeterminate = false;
        }
        checkbox.checked = mode === 'dark';

        const textContent =
          mode === 'system'
            ? btn.getAttribute('data-text-auto')
            : mode === 'dark'
              ? btn.getAttribute('data-text-dark')
              : btn.getAttribute('data-text-light');

        btn.setAttribute('title', textContent || '');

        if (text) {
          text.textContent = textContent;
        }
      }

      // 点击处理
      btn.addEventListener('click', () => {
        const currentMode = getCurrentMode();
        const nextMode = getNextMode(currentMode);

        // 更新 localStorage
        if (nextMode === 'system') {
          localStorage.removeItem('darkMode');
        } else {
          localStorage.darkMode = nextMode === 'dark';
        }

        // 触发主题变化事件
        const isDark =
          nextMode === 'system'
            ? window.matchMedia('(prefers-color-scheme: dark)').matches
            : nextMode === 'dark';

        document.dispatchEvent(
          new CustomEvent('blog:darkmode-change', {
            detail: { isDark, nextMode },
          })
        );
      });

      document.addEventListener('blog:darkmode-change', (e) => {
        // @ts-expect-error CustomEvent.detail is not defined in TypeScript
        const { nextMode } = e.detail;
        updateUI(nextMode);
      });

      // 初始化 UI
      updateUI(getCurrentMode());
    });

    document.addEventListener('blog:darkmode-change', (e) => {
      // @ts-expect-error CustomEvent.detail is not defined in TypeScript
      const { isDark } = e.detail;
      document.documentElement.setAttribute(
        'data-theme',
        isDark ? buildConfig.themeNames.dark : buildConfig.themeNames.light
      );
    });
  }

  document.addEventListener('astro:page-load', setup);
  setup();
</script>
