---
import { navbarConfig, siteConfig } from '@/config';
import { t } from '@utils/i18n';
import { Icon } from 'astro-icon/components';
import Button from './widgets/Button.astro';
import DarkModeButton from './widgets/DarkModeButton.astro';

interface Props {
  title?: string;
  lang?: string;
}
let { title } = Astro.props;
if (!title) title = 'Astral Halo';
---

<div class="drawer drawer-end">
  <input id="sidebar-drawer" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content flex flex-col">
    <!-- Navbar -->
    <div
      id="navbar"
      class="navbar bg-base-200/50 fixed z-20 flex h-16 w-full items-center backdrop-blur-md"
    >
      <div class="navbar-start">
        <Button id="site-name" href="/" class="group btn-ghost btn-accent">
          <span class="text-xl font-bold duration-300 group-hover:opacity-0">{title}</span>
          <Icon
            name="material-symbols:home-rounded"
            class="absolute text-3xl opacity-0 duration-300 group-hover:opacity-100"
          />
        </Button>
      </div>
      <nav class="join navbar-center max-md:hidden">
        {
          navbarConfig.navbarCenterItems.map((item) => {
            if ('items' in item) {
              return (
                <div class="group flex flex-col gap-0">
                  <Button title={item.title} class="btn-ghost join-item btn-primary">
                    <span class="text-xl tracking-wide">{item.title}</span>
                  </Button>
                  <div class="hidden h-0 w-0 self-center group-hover:block">
                    <ul class="menu bg-base-200/50 absolute -translate-x-[50%] rounded-xl shadow backdrop-blur-md">
                      {item.items.map((subItem) => (
                        <Button
                          {...('href' in subItem &&
                            subItem.href && {
                              href: subItem.href,
                              target: subItem.blank ? '_blank' : undefined,
                            })}
                          {...('onclick' in subItem &&
                            subItem.onclick &&
                            (typeof subItem.onclick === 'string'
                              ? { onclick: subItem.onclick }
                              : { id: 'side-' + subItem.onclick.id }))}
                          {...(subItem.extraAttr || {})}
                          title={subItem.text}
                          aria-label={subItem.text}
                          class="btn-ghost btn-primary rounded-field"
                        >
                          <span class="text-xl tracking-wide">{subItem.text}</span>
                        </Button>
                      ))}
                    </ul>
                  </div>
                </div>
              );
            } else {
              return (
                <Button
                  {...('href' in item &&
                    item.href && {
                      href: item.href,
                      target: item.blank ? '_blank' : undefined,
                    })}
                  {...('onclick' in item &&
                    item.onclick &&
                    (typeof item.onclick === 'string'
                      ? { onclick: item.onclick }
                      : { id: 'side-' + item.onclick.id }))}
                  {...(item.extraAttr || {})}
                  title={item.text}
                  aria-label={item.text}
                  class="btn-ghost join-item btn-primary"
                >
                  <span class="text-xl tracking-wide">{item.text}</span>
                </Button>
              );
            }
          })
        }
      </nav>
      <div class="navbar-end">
        <div class="flex max-md:hidden">
          {
            navbarConfig.navbarRightItems.onlyWide.map((item) => (
              <Button
                class="nav-menu-item btn-circle btn-ghost btn-primary"
                {...('href' in item &&
                  item.href && { href: item.href, target: item.blank ? '_blank' : undefined })}
                title={item.text}
                aria-label={item.text}
                {...('onclick' in item &&
                  item.onclick &&
                  (typeof item.onclick === 'string'
                    ? { onclick: item.onclick }
                    : { id: 'nav-' + item.onclick.id }))}
                {...(item.extraAttr || {})}
              >
                <Icon name={item.icon} height="1.5rem" width="1.5rem" />
              </Button>
            ))
          }
        </div>
        <div class="flex">
          {
            navbarConfig.navbarRightItems.always.map((item) => (
              <Button
                class="nav-menu-item btn-circle btn-ghost btn-primary"
                {...('href' in item &&
                  item.href && { href: item.href, target: item.blank ? '_blank' : undefined })}
                title={item.text}
                aria-label={item.text}
                {...('onclick' in item &&
                  item.onclick &&
                  (typeof item.onclick === 'string'
                    ? { onclick: item.onclick }
                    : { id: 'nav-' + item.onclick.id }))}
                {...(item.extraAttr || {})}
              >
                <Icon name={item.icon} height="1.5rem" width="1.5rem" />
              </Button>
            ))
          }
        </div>
        <div class="md:hidden">
          <label
            for="sidebar-drawer"
            class="btn btn-circle btn-ghost btn-primary"
            tabindex="0"
            title={t.info.openMenu()}
            aria-label={t.info.openMenu()}
          >
            <Icon name="material-symbols:menu-rounded" height="1.5rem" width="1.5rem" />
          </label>
        </div>
      </div>
    </div>
    {siteConfig.banner === false && <div id="navbar-placeholder" class="pt-20" />}
    <!-- Page Content -->
    <slot />
  </div>
  <div class="drawer-side z-50">
    <!-- Sidebar -->
    <label
      for="sidebar-drawer"
      class="drawer-overlay"
      title={t.info.closeMenu()}
      aria-label={t.info.closeMenu()}></label>
    <ul
      role="navigation"
      class="menu from-base-100 to-base-300 dark:from-base-300 dark:to-base-100 min-h-full w-[min(calc(100%-3rem),20rem)] bg-linear-150 p-4"
    >
      <li>
        <DarkModeButton class="text-xl" showText={true} useDefaultBtnClass={false} />
      </li>
      <div class="divider text-lg font-bold">{t.navigation.menu()}</div>
      {
        navbarConfig.navbarCenterItems.map((item) => {
          if ('items' in item) {
            return (
              <li>
                <details>
                  <summary class="text-xl">{item.title}</summary>
                  <ul>
                    {item.items.map((subItem) => (
                      <li>
                        <Button
                          {...('href' in subItem &&
                            subItem.href && {
                              href: subItem.href,
                              target: subItem.blank ? '_blank' : undefined,
                            })}
                          {...('onclick' in subItem &&
                            subItem.onclick &&
                            (typeof subItem.onclick === 'string'
                              ? { onclick: subItem.onclick }
                              : { id: 'side-' + subItem.onclick.id }))}
                          {...(subItem.extraAttr || {})}
                          title={subItem.text}
                          aria-label={subItem.text}
                          useDefaultClass={false}
                        >
                          <span class="text-xl">{subItem.text}</span>
                        </Button>
                      </li>
                    ))}
                  </ul>
                </details>
              </li>
            );
          } else {
            return (
              <li>
                <Button
                  {...('href' in item &&
                    item.href && {
                      href: item.href,
                      target: item.blank ? '_blank' : undefined,
                    })}
                  {...('onclick' in item &&
                    item.onclick &&
                    (typeof item.onclick === 'string'
                      ? { onclick: item.onclick }
                      : { id: 'side-' + item.onclick.id }))}
                  {...(item.extraAttr || {})}
                  title={item.text}
                  aria-label={item.text}
                  useDefaultClass={false}
                >
                  <span class="text-xl">{item.text}</span>
                </Button>
              </li>
            );
          }
        })
      }
      {
        navbarConfig.navbarRightItems.onlyWide.map((item) => (
          <li>
            <Button
              {...('href' in item &&
                item.href && { href: item.href, target: item.blank ? '_blank' : undefined })}
              title={item.text}
              aria-label={item.text}
              {...('onclick' in item &&
                item.onclick &&
                (typeof item.onclick === 'string'
                  ? { onclick: item.onclick }
                  : { id: 'side-' + item.onclick.id }))}
              {...(item.extraAttr || {})}
              useDefaultClass={false}
            >
              <Icon name={item.icon} height="1.5rem" width="1.5rem" />
              <span class="text-xl">{item.text}</span>
            </Button>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script>
  import { navbarConfig } from '@/config';
  const rightItems = [
    navbarConfig.navbarRightItems.onlyWide,
    navbarConfig.navbarRightItems.always,
  ].flat();

  function setup() {
    rightItems.forEach((item) => {
      if ('onclick' in item && item.onclick && typeof item.onclick !== 'string') {
        const navEl = document.getElementById('nav-' + item.onclick.id);
        if (navEl) navEl.addEventListener('click', item.onclick.function);
        const sideEl = document.getElementById('side-' + item.onclick.id);
        if (sideEl) sideEl.addEventListener('click', item.onclick.function);
      }
    });
  }

  setup();
  document.addEventListener('astro:page-load', setup);
</script>
